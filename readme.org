- The React Blazing upupup
- Process
  : (x) create-react-app
  : all configure project manually
- A modern build pipeline typically consists of:
  : A package manager => yarn | npm <- to take use of third party packages
  : A bundler => webpack | browserify <- wirte modular code 
  :                                   <- build them into together
  :                                   <- optimize load time
  : A compiler => modern js
  *for me*  => yarn + webpack + babel

- project setup
  : yarn add react react-dom => main dependencies
  : yarn add -D babel-cli babel-preset-react babel-preset-env <= compiler & compile plugins(esnext + jsx)
  :             <-  .babelrc => "presets": ["env", "react"]
  :             <-  package.config => "scripts": "babel src -d lib"
  : mkdir src && cd $_ && emacs index.jsx 
  #+BEGIN_SRC rjsx
    import React from 'react';
    import ReactDOM from 'react-dom';

    ReactDOM.render(
      <h1>Hello, world!</h1>,
      document.getElementById('root')
    );


  #+END_SRC
  : cd .. && emacs index.html
  #+BEGIN_SRC html
    <body>
      <div id="root"></div>
      <script src="./node_modules/react/umd/react.production.min.js"></script> <!-- Error#1: umd <=> (x) require -->
      <script src="./node_modules/react-dom/umd/react-dom.production.min.js"></script> <!-- Error#2 cjs =(x)=> browser-->
      <script src="./lib/index.js"></script>
    </body>
  #+END_SRC
  
- encounting error
  : babel build -> requir() <=== transpile to cjs(common js pec)
  : Babel isn't a module bundler <== webpack | browserify
  : Browserify? -> Browserify lets you require('modules') in the browser by bundling up all of your dependencies.
- install bundler
  : yarn add browserify
  : "scripts": "babel src -d lib | broserify"
- how browserify work  
  : 1. module map
  #+BEGIN_SRC js
    {
      1: [function (require, module, exports) {
        module.exports = 'DEP';

      }, {}],
      2: [function (require, module, exports) {
        require('./dep');

        module.exports = 'ENTRY';

      }, {"./dep": 1}]
    }  mpa
  #+END_SRC

- intro task runner or build tools
  : Once you're comfortable with Browserify, you'll probably want to integrate it with your favorite build tool. 
  : gulp | grunt | make
  : github.com/guilpjs/vinyl <== virutal file format
  : Vinyl is a very simple metadata object 
  : gulp works using vinyl stream
  : Because browserify.bundle() return a text stream where as gulp works using vinyl stream. In order to browserify to work with other plugins you need to use vinyl-source-stream.

- write gulpfiles in es6?
  : yarn add -D babel-core babel-presst-env
  : emacs gulp.babel.js

- gulp upupup
  : yarn remove babel-
  : yarn add -D @babel/core @babel/preset-env @babel-preset-react
  : yarn add -D browserify
  : yarn add -D gulp
  : json hints  -> 1. double quote enfore "" 2. (x) {"helo": 10,} trailing comma
  


* Reference
  [[https://www.smashingmagazine.com/2014/06/building-with-gulp/][How To Build And Develop Websites With Gulp]]
  [[http://blog.revathskumar.com/2016/02/browserify-with-gulp.html][Browserify with gulp]]
